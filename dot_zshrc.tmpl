# starship
PYENV_VIRTUALENV_DISABLE_PROMPT=1

# general
export EDITOR=nvim
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export HISTFILE="$HOME/.zsh_history"
autoload -Uz colors
colors
bindkey -e

# asdf
{{ if eq .chezmoi.os "darwin" }}
{{ if eq .chezmoi.arch "arm64" }}
export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
{{ end }}
# fpath=(${ASDF_DIR}/completions $fpath)
# source "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/zshrc"
{{ end }}
{{ if eq .chezmoi.os "linux" }}
. "$HOME/.asdf/asdf.sh"
{{ end }}

# Java
{{ if eq .chezmoi.os "darwin" }}
export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"
export CPPFLAGS="-I/opt/homebrew/opt/openjdk@11/include"
{{ end }}

# PHP
{{ if eq .chezmoi.os "darwin" }}
export PATH="/opt/homebrew/opt/php@8.1/bin:$PATH"
export PATH="/opt/homebrew/opt/php@8.1/sbin:$PATH"
{{ end }}

# Go
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# flutter
export PATH="$PATH:$HOME/dev/flutter/bin"

# nvm
{{ if eq .chezmoi.os "darwin" }}
export NVM_DIR="$HOME/.nvm"
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
{{ end }}

export PATH="$HOME/.local/bin:$PATH"

# options
setopt print_eight_bit
setopt no_beep
setopt nolistbeep
setopt ignoreeof
setopt extended_glob
setopt notify
setopt magic_equal_subst

# history
setopt auto_pushd
setopt append_history
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_reduce_blanks
setopt pushd_ignore_dups
setopt inc_append_history
HISTSIZE=100000
SAVEHIST=100000

# completions
if [ -e ~/.zsh/completions ]; then
    fpath=(~/.zsh/completions $fpath)
fi
autoload -Uz compinit && compinit
zstyle ':completion:*' completer _complete _approximate _prefix

# aliases
alias vim="nvim"
alias view="nvim -R"
alias tl='tldr'
alias ls="eza --sort=ext"
alias tree="eza -T"
alias df="duf"
alias grepc="grep --color=always"
alias teee='tee >(pbcopy)'
alias av='aws-vault'
alias ave='aws-vault exec'
alias code='cursor'
alias dbash='docker build -t tmp . && docker run -it --rm --entrypoint /bin/bash tmp'

# fish-like behavior
source `brew --prefix`/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
if type brew &>/dev/null; then
    FPATH=$(brew --prefix)/share/zsh-completions:$FPATH
    FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi

# zsh-autosuggestions
{{ if eq .chezmoi.os "darwin" }}
source `brew --prefix`/share/zsh-autosuggestions/zsh-autosuggestions.zsh
{{ end }}
{{ if eq .chezmoi.os "linux" }}
source `brew --prefix`/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fpath=(${ASDF_DIR}/completions $fpath)
{{ end }}

# initialize
function command_exists() {
    command -v "$1" >/dev/null 2>&1
}

z() {
    unset -f z
    eval "$(zoxide init zsh)"
    __zoxide_z "$@"
}

gh() {
    unset -f gh
    eval "$(gh completion -s zsh)"
    gh "$@"
}

direnv() {
    unset -f direnv
    eval "$(direnv hook zsh)"
    direnv "$@"
}

command_exists starship && eval "$(starship init zsh)"

# fzf
if command_exists fzf; then
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    export FZF_COMPLETION_TRIGGER=","
    export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!**/.git/*" --glob "!**/node_modules/*" --glob "!**/vendor/*" --glob "!**/dist/*"'
    export FZF_DEFAULT_OPTS="
    --height 50%
    --reverse
    --prompt='[file] > '
    --pointer='>'
    --marker='*'
    --ansi
    --color=fg:#f8f8f2,bg:#282a36,hl:#bd93f9
    --color=fg+:#f8f8f2,bg+:#282a36,hl+:#bd93f9
    --color=info:#ffb86c,prompt:#50fa7b,pointer:#ff79c6
    --color=marker:#ff79c6,spinner:#ffb86c,header:#6272a4
    --bind=ctrl-k:kill-line,ctrl-d:preview-down,ctrl-u:preview-up
    --preview-window=right:60%:wrap
    --border=rounded
    --margin=1
    --padding=1
    "

    # for finding files in current directories
    export FZF_CTRL_T_COMMAND='rg --files --hidden --follow --glob "!**/.git/*" --glob "!**/node_modules/*" --glob "!**/vendor/*" --glob "!**/dist/*"'
    export FZF_CTRL_T_OPTS="--prompt='[file] > '"

    # Enhanced <c-r>
    function select-history() {
        local original_buffer=$BUFFER
        local query=$LBUFFER
        local result=$(history -n -r 1 | fzf +m --print-query --query "$query" --prompt="[cmd] > " --exact)
        if [ -n "$result" ]; then
            BUFFER=$(echo "$result" | tail -n 1 | tr -d '\n')
        else
            BUFFER=$query
        fi
        CURSOR=$#BUFFER
        zle redisplay
    }
    zle -N select-history
    bindkey '^r' select-history

    # Enhanced <c-t>
    function select-file() {
        local result=$(rg --files --hidden --follow --glob "!**/.git/*" | fzf +m --prompt="[file] > ")
        if [ -n "$result" ]; then
            LBUFFER="${LBUFFER}${result}"
        fi
        zle redisplay
    }
    zle -N select-file
    bindkey '^t' select-file

    # Open repo with <c-g>
    function _ghq_fzf() {
        local src=$(ghq list | fzf --prompt "[ghq] > ")
        zle redisplay
        if [ -n "$src" ]; then
            BUFFER="cd $(ghq root)/$src"
            zle accept-line
        fi
        zle -R -c
    }
    zle -N _ghq_fzf
    bindkey '^g' _ghq_fzf

    # cd (fzf + zoxide) with zz
    zz() {
        local dirpath=$(zoxide query -l | sed "s|$HOME|~|g" | fzf --prompt "> " --preview="eval echo {} | sed 's|~|$HOME|' | xargs exa -a --oneline --sort=ext")
        cd $(eval echo $(echo $dirpath | sed 's|~|$HOME|'))
    }
fi

# copy the previous command
ppp() {
    prev_cmd=$(history -n | tail -n 1)
    echo "\"$prev_cmd\" copied!"
    echo -n $prev_cmd | pbcopy
}

# colorlized man pages
man() {
    LESS_TERMCAP_md=$'\e[01;34m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;4;31m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;36m' \
    command man "$@"
}

# open note
# v                 : open recent note
# v n|new           : create and open next note in ~/notes
# v c|current       : show path to current note
# v l|list          : show list of notes
v() {
    if [[ $# -eq 0 ]]; then
        local latest_version=$(tail -n1 ~/notes/.version 2>/dev/null || echo -n "")
        if [[ -f ~/notes/$latest_version.md ]]; then
            vim ~/notes/$latest_version.md
        else
            echo "No notes found. Create a new note with 'v n' or 'v new'."
            rm ~/notes/.version 2>/dev/null
            return 1
        fi
        return
    fi

    if [[ $1 == "n" || $1 == "new" ]]; then
        local next_version=$(uuidgen)
        vim ~/notes/$next_version.md
        if [[ -f ~/notes/$next_version.md ]]; then
            echo $next_version > ~/notes/.version
        fi
        return
    fi

    if [[ $1 == "c" || $1 == "current" ]]; then
        local latest_version=$(tail -n1 ~/notes/.version 2>/dev/null || echo -n "")
        if [[ -z $latest_version ]]; then
            echo "No current note version found. Create a new note with 'v n' or 'v new'."
            return 1
        fi

        if [[ -t 1 ]]; then
            echo -n "current note path: "
        fi
        echo ~/notes/$latest_version.md
        if [[ -t 1 ]]; then
            echo "created at: $(date -r ~/notes/$latest_version.md '+%Y-%m-%d %H:%M:%S')"
        fi
        return
    fi

    if [[ $1 == "l" || $1 == "list" ]]; then
        local latest_version=$(tail -n1 ~/notes/.version 2>/dev/null || echo -n "")

        /bin/ls -lat ~/notes/*.md | head -n5 | awk -v latest="$latest_version" '{
            cmd = "wc -m < \"" $9 "\""
            cmd | getline chars
            close(cmd)
            chars = chars + 0
            
            filename = $9
            gsub(/.*\//, "", filename)
            gsub(/\.md$/, "", filename)
            
            green = "\033[32m"
            yellow = "\033[33m"
            blue = "\033[34m"
            red = "\033[31m"
            gray = "\033[90m"
            white = "\033[37m"
            reset = "\033[0m"
            
            current_marker = ""
            if (latest != "" && filename == latest) {
                current_marker = red " [current]" reset
            }
            
            printf "%s%s %s %s%s (%schars: %s%s)%s\n%s%s%s\n", 
                blue, $6, $7, $8, reset, 
                yellow, chars, reset, 
                current_marker,
                green, $9, reset
            
            head_cmd = "head -n3 \"" $9 "\""
            while ((head_cmd | getline line) > 0) {
                printf "%s  %s%s\n", white, line, reset
            }
            close(head_cmd)
            
            if (NR < 5) print ""
        }'
        return
    fi

    echo "Usage: v [n|new] | [c|current] | [l|list]"
}

alias vn='v new'
alias vl='v list'
alias vc='v current'

# docker compose
d() {
    docker compose exec $@
}

# personal notes and drafts
# - ignore kabe directory in git
_k() {
    if git rev-parse --is-inside-work-tree >/dev/null 2>&1 && [[ -d ./kabe ]]; then
        local -a files
        files=(./kabe/*(N:t)) 
        
        if (( ${#files} > 0 )); then
            _describe 'kabe files' files -P 'kabe/'
        fi
    fi
}

k() {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "This is not a git repository."
        return 1
    fi

    if [[ ! -e ./kabe ]]; then
        echo -n "kabe directory does not exist. Create it? (y/n) "
        read yn
        if [[ $yn == "y" || $yn == "Y" ]]; then
            mkdir kabe
            echo "kabe directory created."
        else
            echo "Exiting without creating kabe directory."
            return 1
        fi
    fi

    if [[ $# -eq 0 ]]; then
        ls ./kabe
    elif [[ $# -eq 1 ]]; then
        if [[ "$1" == kabe/* ]]; then
            vim $1
        else
            vim kabe/$1
        fi
    else
        echo "Usage: k [filename]"
        echo "If no filename is provided, it lists the contents of the kabe directory."
    fi
}
compdef _k k

## git status
git-path() {
    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "This is not a git repository."
        return 1
    fi

    super_root=$(git rev-parse --show-superproject-working-tree 2>/dev/null)
    root=$(git rev-parse --show-toplevel 2>/dev/null)

    if [[ -n "$super_root" ]]; then
        echo $(basename $super_root)${root:${#super_root}}
    else
        echo $(basename $root)
    fi
}

g() {
    echo "root : $(git-path)"

    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "This is not a git repository."
        return 1
    fi

    echo "name : $(git config user.name)"
    echo "email: $(git config user.email)"
}

# ssh
function ssh() {
  if [[ -n $(printenv TMUX) ]] ; then
      local pane_id=$(tmux display -p '#{pane_id}')
      local original_bg=$(tmux show-options -gqv pane-active-border-style | grep -o 'bg=[^,]*')

      if [[ `echo $1 | grep -E 'prd|prod|production'` ]] ; then
          tmux select-pane -P 'bg=#330000'
      elif [[ `echo $1 | grep -E 'stg|staging'` ]] ; then
          tmux select-pane -P 'bg=#000033'
      fi

      command ssh "$@"

      tmux select-pane -t $pane_id -P "$original_bg"
  else
      command ssh "$@"
  fi
}

alias c='claude'

# tmux
alias ide='tmux split-window -h \; resize-pane -t 0 -x 20% \; resize-pane -t 1 -x 80%'

# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then . "$HOME/google-cloud-sdk/path.zsh.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then . "$HOME/google-cloud-sdk/completion.zsh.inc"; fi
