eval "$(starship init zsh)"

# starship
PYENV_VIRTUALENV_DISABLE_PROMPT=1

# general
export EDITOR=nvim
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export HISTFILE="$HOME/.zsh_history"
autoload -Uz colors
colors
bindkey -e

# direnv
eval "$(direnv hook zsh)"

# asdf
{{ if eq .chezmoi.os "darwin" }}
{{ if eq .chezmoi.arch "arm64" }}
. /opt/homebrew/opt/asdf/libexec/asdf.sh
{{ end }}
# fpath=(${ASDF_DIR}/completions $fpath)
source "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/zshrc"
{{ end }}
{{ if eq .chezmoi.os "linux" }}
. "$HOME/.asdf/asdf.sh"
{{ end }}

# Java
{{ if eq .chezmoi.os "darwin" }}
export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"
export CPPFLAGS="-I/opt/homebrew/opt/openjdk@11/include"
{{ end }}

# PHP
{{ if eq .chezmoi.os "darwin" }}
export PATH="/opt/homebrew/opt/php@8.0/bin:$PATH"
export PATH="/opt/homebrew/opt/php@8.0/sbin:$PATH"
{{ end }}

# Go
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# flutter
export PATH="$PATH:$HOME/dev/flutter/bin"

# nvm
{{ if eq .chezmoi.os "darwin" }}
export NVM_DIR="$HOME/.nvm"
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
{{ end }}

export PATH="$HOME/.local/bin:$PATH"

# options
setopt print_eight_bit
setopt no_beep
setopt nolistbeep
setopt ignoreeof
setopt extended_glob
setopt notify
setopt magic_equal_subst

# history
setopt auto_pushd
setopt share_history
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt pushd_ignore_dups
setopt hist_ignore_all_dups
HISTSIZE=100000
SAVEHIST=100000

# completions
if [ -e ~/.zsh/completions ]; then
    fpath=(~/.zsh/completions $fpath)
fi
autoload -Uz compinit && compinit
zstyle ':completion:*' completer _complete _approximate _prefix

# aliases
alias vi="nvim -u ~/.vimrc"
alias vim="nvim"
alias view="nvim -R"
alias tl='tldr'
alias av='aws-vault'
alias t=task
{{ if eq .chezmoi.os "darwin" }}
alias ls="exa --sort=ext" 
alias tree="exa -T"
alias df="duf"
alias navi="navi --fzf-overrides \"--bind='ctrl-k:kill-line' --prompt 'NAVI> '\" --fzf-overrides-var \"--bind='ctrl-k:kill-line' --prompt 'NAVI> '\""

{{ end }}

# fish-like behavior
{{ if eq .chezmoi.os "darwin"  }}
{{ end }}
source `brew --prefix`/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
if type brew &>/dev/null; then
    FPATH=$(brew --prefix)/share/zsh-completions:$FPATH
    FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi

# zsh-autosuggestions
{{ if eq .chezmoi.os "darwin" }}
source `brew --prefix`/share/zsh-autosuggestions/zsh-autosuggestions.zsh
{{ end }}
{{ if eq .chezmoi.os "linux" }}
source `brew --prefix`/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fpath=(${ASDF_DIR}/completions $fpath)
{{ end }}

# navi
# TODO: Add configs for navi

# zoxide
eval "$(zoxide init zsh)"

# gh
eval "$(gh completion -s zsh)"

# configs of fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
export FZF_COMPLETION_TRIGGER="," # default: '**'
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!**/.git/*"'
export FZF_DEFAULT_OPTS="--height 40% --reverse --prompt='/ ' --bind=ctrl-k:kill-line,ctrl-d:preview-down,ctrl-u:preview-up"

# for finding files in current directories
export FZF_CTRL_T_COMMAND='rg --files --hidden --follow --glob "!**/.git/*"'
export FZF_CTRL_T_OPTS="--prompt='FILES> '"

# select command from history with fzf
function select-history() {
  BUFFER=$(history -n -r 1 | fzf --no-sort +m --query "$LBUFFER" --prompt="CMD_HISTORY > ")
  CURSOR=$#BUFFER
}
zle -N select-history
bindkey '^r' select-history

# fghq (ghq)
function _ghq_fzf() {
    local src=$(ghq list | fzf --prompt "GHQ> ")
    if [ -n "$src" ]; then
        BUFFER="cd $(ghq root)/$src"
        zle accept-line
    fi
    zle -R -c
}
zle -N _ghq_fzf
bindkey '^g' _ghq_fzf

# fco (git checkout) - checkout git branch including remote branches
# ref: https://qiita.com/kamykn/items/aa9920f07487559c0c7e
fco() {
    local branches branch
    branches=$(git branch --all | grep -v HEAD) &&
    branch=$(echo "$branches" |
            fzf --prompt "CHECKOUT BRANCH> " -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
    git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# fbr - checkout git branch
fbr() {
  local branches branch
  branches=$(git --no-pager branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# flog - git commit browser
# ref: https://qiita.com/kamykn/items/aa9920f07487559c0c7e
flog() {
    git log --graph --color=always \
        --format="%C(auto)%h%d %s %C(#C0C0C0)%C(bold)%cr" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
        --prompt "BROWSE COMMIT> " \
        --bind "ctrl-m:execute:
              (grep -o '[a-f0-9]\{7\}' | head -1 |
              xargs -I % sh -c 'git diff % | delta') << 'FZF-EOF'
              {}
FZF-EOF"
}

# Enter docker containers with fzf
# ref: https://momozo.tech/2021/03/10/fzf%E3%81%A7zsh%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E4%BD%9C%E6%A5%AD%E3%82%92%E5%8A%B9%E7%8E%87%E5%8C%96/
fcon() {
    local cid
    cid=$(docker ps | sed 1d | fzf -q "$1" --prompt "ENTER CONTAINER> " | awk '{print $1}')
    [ -n "$cid" ] && docker exec -it "$cid" /bin/bash
}

# Show docker logs with fzf
# ref: https://momozo.tech/2021/03/10/fzf%E3%81%A7zsh%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E4%BD%9C%E6%A5%AD%E3%82%92%E5%8A%B9%E7%8E%87%E5%8C%96/
fdl() {
    local cid
    cid=$(docker ps -a | sed 1d | fzf -q "$1" --prompt "SHOW DOCKER LOG> " | awk '{print $1}')
    [ -n "$cid" ] && docker logs -f --tail=200 "$cid"
}

# ssh
ffh() {
    local host=$(grep -E "^Host " ~/.ssh/config | sed -e 's/Host[ ]*//g' | fzf --prompt "SSH> ")
    if [ -n "$host" ]; then
        ssh $host
    fi
}

# change directory (with zoxide)
zz() {
    local dirpath=$(zoxide query -l | sed "s|$HOME|~|g" | fzf --prompt "CD> " --preview="eval echo {} | sed 's|~|$HOME|' | xargs exa -a --oneline --sort=ext")
    cd $(eval echo $(echo $dirpath | sed 's|~|$HOME|'))
}

_fhelp() {
    echo "fbr    - checkout git branches"
    echo "fco    - checkout git branches (including remote branches)"
    echo "flog   - browse git commit history"
    echo "fcon   - enter docker containers interactively"
    echo "fdl    - display docker logs"
    echo "ffh    - ssh"
    echo "zz     - change directory"
}

fhelp() {
    local selected
    selected=$(_fhelp | fzf --prompt "FZF HELP> " | cut -d " " -f 1)
    eval $selected
}
alias fh=fhelp

# the fuck
eval $(thefuck --alias)

# colorlized man
man() {
    LESS_TERMCAP_md=$'\e[01;34m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;4;31m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;36m' \
    command man "$@"
}

# pet
function pet-select() {
  BUFFER=$(pet search --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N pet-select
stty -ixon
bindkey '^s' pet-select

function prev() {
  PREV=$(fc -lrn | head -n 1)
  sh -c "pet new `printf %q "$PREV"`"
}

# copy the previous command
ppp() {
    prev_cmd=$(history -n | tail -n 1)
    echo "\"$prev_cmd\" copied!"
    echo -n $prev_cmd | pbcopy
}
