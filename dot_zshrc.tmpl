# starship
PYENV_VIRTUALENV_DISABLE_PROMPT=1

# general
export EDITOR=nvim
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export HISTFILE="$HOME/.zsh_history"
autoload -Uz colors
colors
bindkey -e

# asdf
{{ if eq .chezmoi.os "darwin" }}
{{ if eq .chezmoi.arch "arm64" }}
. /opt/homebrew/opt/asdf/libexec/asdf.sh
{{ end }}
# fpath=(${ASDF_DIR}/completions $fpath)
source "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/zshrc"
{{ end }}
{{ if eq .chezmoi.os "linux" }}
. "$HOME/.asdf/asdf.sh"
{{ end }}

# Java
{{ if eq .chezmoi.os "darwin" }}
export PATH="/opt/homebrew/opt/openjdk@11/bin:$PATH"
export CPPFLAGS="-I/opt/homebrew/opt/openjdk@11/include"
{{ end }}

# PHP
{{ if eq .chezmoi.os "darwin" }}
export PATH="/opt/homebrew/opt/php@8.1/bin:$PATH"
export PATH="/opt/homebrew/opt/php@8.1/sbin:$PATH"
{{ end }}

# Go
export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

# flutter
export PATH="$PATH:$HOME/dev/flutter/bin"

# nvm
{{ if eq .chezmoi.os "darwin" }}
export NVM_DIR="$HOME/.nvm"
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
{{ end }}

export PATH="$HOME/.local/bin:$PATH"

# options
setopt print_eight_bit
setopt no_beep
setopt nolistbeep
setopt ignoreeof
setopt extended_glob
setopt notify
setopt magic_equal_subst

# history
setopt auto_pushd
setopt append_history
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt pushd_ignore_dups
setopt share_history
HISTSIZE=100000
SAVEHIST=100000

# completions
if [ -e ~/.zsh/completions ]; then
    fpath=(~/.zsh/completions $fpath)
fi
autoload -Uz compinit && compinit
zstyle ':completion:*' completer _complete _approximate _prefix

# aliases
alias vim="nvim"
alias view="nvim -R"
alias tl='tldr'
alias ls="eza --sort=ext"
alias tree="eza -T"
alias df="duf"
alias grepc="grep --color=always"

# fish-like behavior
source `brew --prefix`/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
if type brew &>/dev/null; then
    FPATH=$(brew --prefix)/share/zsh-completions:$FPATH
    FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi

# zsh-autosuggestions
{{ if eq .chezmoi.os "darwin" }}
source `brew --prefix`/share/zsh-autosuggestions/zsh-autosuggestions.zsh
{{ end }}
{{ if eq .chezmoi.os "linux" }}
source `brew --prefix`/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fpath=(${ASDF_DIR}/completions $fpath)
{{ end }}

# initialize
function command_exists() {
    command -v "$1" >/dev/null 2>&1
}

z() {
    unset -f z
    eval "$(zoxide init zsh)"
    __zoxide_z "$@"
}

gh() {
    unset -f gh
    eval "$(gh completion -s zsh)"
    gh "$@"
}

direnv() {
    unset -f direnv
    eval "$(direnv hook zsh)"
    direnv "$@"
}

command_exists starship && eval "$(starship init zsh)"

# fzf
if command_exists fzf; then
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    export FZF_COMPLETION_TRIGGER=","
    export FZF_DEFAULT_COMMAND='rg --files --hidden --follow --glob "!**/.git/*"'
    export FZF_DEFAULT_OPTS="--height 40% --reverse --prompt='/ ' --bind=ctrl-k:kill-line,ctrl-d:preview-down,ctrl-u:preview-up"

    # for finding files in current directories
    export FZF_CTRL_T_COMMAND='rg --files --hidden --follow --glob "!**/.git/*"'
    export FZF_CTRL_T_OPTS="--prompt='FILES> '"

    # Enhanced <c-r>
    function select-history() {
        BUFFER=$(history -n -r 1 | fzf --no-sort +m --query "$LBUFFER" --prompt="CMD> ")
        CURSOR=$#BUFFER
        zle redisplay
    }
    zle -N select-history
    bindkey '^r' select-history

    # Open repo with <c-g>
    function _ghq_fzf() {
        local src=$(ghq list | fzf --prompt "GHQ> ")
        zle redisplay
        if [ -n "$src" ]; then
            BUFFER="cd $(ghq root)/$src"
            zle accept-line
        fi
        zle -R -c
    }
    zle -N _ghq_fzf
    bindkey '^g' _ghq_fzf

    # cd (fzf + zoxide) with zz
    zz() {
        local dirpath=$(zoxide query -l | sed "s|$HOME|~|g" | fzf --prompt "CD> " --preview="eval echo {} | sed 's|~|$HOME|' | xargs exa -a --oneline --sort=ext")
        cd $(eval echo $(echo $dirpath | sed 's|~|$HOME|'))
    }

    # <c-s> to search pet
    function pet-select() {
        BUFFER=$(pet search --query "$LBUFFER")
        CURSOR=$#BUFFER
        zle redisplay
    }
    zle -N pet-select
    stty -ixon
    bindkey '^s' pet-select

    # insert previous command into pet
    prev() {
    PREV=$(fc -lrn | head -n 1)
    sh -c "pet new `printf %q "$PREV"`"
    }
fi

# copy the previous command
ppp() {
    history -n
    echo ''

    prev_cmd=$(history -n | tail -n 1)
    echo "\"$prev_cmd\" copied!"
    echo -n $prev_cmd | pbcopy
}

# colorlized man pages
man() {
    LESS_TERMCAP_md=$'\e[01;34m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;4;31m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;36m' \
    command man "$@"
}


# open note
v() {
    vi ~/notes/$(uuidgen).md
}

# tmpfile
vv() {
    echo ~/notes/$(uuidgen).txt
}

# docker compose
d() {
    docker compose exec $@
}
