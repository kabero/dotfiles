local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
    vim.fn.system({
        "git",
        "clone",
        "--filter=blob:none",
        "--single-branch",
        "https://github.com/folke/lazy.nvim.git",
        lazypath,
    })
end
vim.opt.runtimepath:prepend(lazypath)

require('lazy').setup({
    {
        "LazyVim/LazyVim",
    },

    {
        "sainnhe/everforest",
        config = function()
            vim.cmd [[let g:everforest_background = 'hard']]
        end
    },

    {
        "folke/tokyonight.nvim",
        lazy = false,
        priority = 1000,
    },

    {
        "ellisonleao/gruvbox.nvim",
        priority = 1000,
        config = function()
            require("gruvbox").setup({
                undercurl = true,
                underline = false,
                bold = true,
                italic = {
                    strings = false,
                    comments = false,
                    operators = false,
                    folds = false,
                },
                inverse = true,
                contrast = "hard",
                palette_overrides = {},
                overrides = {},
                dim_inactive = false,
                transparent_mode = false,
            })
        end,
    },

    {
        "nvim-telescope/telescope.nvim",
        cmd = 'Telescope',
        dependencies = {
            "nvim-lua/plenary.nvim",
        },
        config = function()
            require('plugin_configs/_telescope')
        end
    },

    {
        "nvim-telescope/telescope-file-browser.nvim",
        lazy = false,
        dependencies = { "nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim" },
        config = function()
            require("telescope").load_extension "file_browser"
            vim.api.nvim_set_keymap(
                "n",
                "<leader>fn",
                ":Telescope file_browser theme=ivy path=%:p:h select_buffer=true hidden=true<CR>",
                { noremap = true }
            )
        end
    },

    {
        "nvim-telescope/telescope-frecency.nvim",
        config = function()
            require "telescope".load_extension("frecency")
        end,
        dependencies = { "kkharji/sqlite.lua" }
    },

    {
        'nvim-lualine/lualine.nvim',
        event = 'VeryLazy',
        dependencies = {
            'nvim-tree/nvim-web-devicons',
        },
        config = function()
            require('lualine').setup {
                require("plugin_configs/_lualine")
            }
        end
    },

    {
        'windwp/nvim-autopairs',
        event = 'InsertEnter',
        config = function()
            require('nvim-autopairs').setup({})
        end
    },

    { 'tpope/vim-commentary', lazy = false },

    {
        'nvim-treesitter/nvim-treesitter',
        lazy = false,
        dependencies = 'windwp/nvim-ts-autotag',
        config = function()
            require("plugin_configs/_nvim_treesitter")
        end
    },

    {
        'j-hui/fidget.nvim',
        event = 'LspAttach',
        tag = 'legacy',
        config = function()
            require('fidget').setup({})
        end
    },

    {
        'lewis6991/gitsigns.nvim',
        lazy = false,
        config = function()
            require('gitsigns').setup {
                on_attach = function(bufnr)
                    local function map(mode, lhs, rhs, opts)
                        opts = vim.tbl_extend('force', { noremap = true, silent = true }, opts or {})
                        vim.api.nvim_buf_set_keymap(bufnr, mode, lhs, rhs, opts)
                    end

                    -- Navigation
                    map('n', ']c', "&diff ? ']c' : '<cmd>Gitsigns next_hunk<CR>'", { expr = true })
                    map('n', '[c', "&diff ? '[c' : '<cmd>Gitsigns prev_hunk<CR>'", { expr = true })

                    -- Actions
                    map('n', '<leader>aj', '<cmd>Gitsigns preview_hunk<CR>')
                    map('n', '<leader>ak', '<cmd>lua require"gitsigns".blame_line{full=true}<CR>')
                    map('n', '<leader>al', '<cmd>Gitsigns diffthis<CR>')
                    -- map('n', '<leader>al', '<cmd>lua require"gitsigns".diffthis("~")<CR>')
                    map('n', '<leader>1', '<cmd>Gitsigns toggle_current_line_blame<CR>')
                    map('n', '<leader>2', '<cmd>Gitsigns toggle_deleted<CR>')
                end
            }
        end
    },

    {
        'nanotee/zoxide.vim',
        event = 'InsertEnter, CmdlineEnter'
    },

    {
        'neovim/nvim-lspconfig',
        event = 'InsertEnter',
    },

    {
        'mfussenegger/nvim-dap',
        lazy = false
    },

    {
        'williamboman/mason.nvim',
        lazy = false,
        build = ":MasonUpdate",
        config = function()
            local mason = require('mason')
            mason.setup({
                ui = {
                    icons = {
                        package_installed = "✓",
                        package_pending = "→",
                        package_uninstalled = "✗"
                    }
                }
            })
        end
    },

    {
        'williamboman/mason-lspconfig.nvim',
        lazy = false,
        config = function()
            local mason_lspconfig = require('mason-lspconfig')
            local nvim_lsp = require('lspconfig')
            require('mason-lspconfig').setup {
                ensure_installed = {}
            }

            mason_lspconfig.setup_handlers({ function(server)
                local opts = {}
                opts.on_attach = function(_, bufnr)
                    -- keymap for formatting
                    local bufopts = { noremap = true, silent = true, buffer = bufnr }
                    vim.keymap.set('n', 'gl', function() vim.lsp.buf.format { async = true } end, bufopts)
                end
                nvim_lsp[server].setup(opts)
            end })

            vim.diagnostic.config {
                virtual_text = {
                    format = function(diagnostic)
                        return string.format("%s (%s: %s)", diagnostic.message, diagnostic.source, diagnostic.code)
                    end,
                },
                signs = true,
                underline = true,
            }

            vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
                vim.lsp.diagnostic.on_publish_diagnostics, {
                    update_in_insert = false,
                    -- virtual_text = {
                    --     format = function(diagnostic)
                    --         return string.format("%s (%s: %s)", diagnostic.message, diagnostic.source, diagnostic.code)
                    --     end,
                    -- },
                }
            )

            function ToggleDisplayDiagnostics()
                if ShowingDiagnostics == nil then
                    ShowingDiagnostics = true
                end

                if ShowingDiagnostics then
                    vim.diagnostic.disable()
                    print("Diagnostics disabled")
                else
                    vim.diagnostic.enable()
                    print("Diagnostics enabled")
                end
                ShowingDiagnostics = not ShowingDiagnostics
            end

            vim.keymap.set('n', '<leader>9', '<cmd>lua ToggleDisplayDiagnostics()<CR>', { noremap = true, silent = true })
        end
    },

    {
        "nvim-tree/nvim-web-devicons"
    },

    {
        'glepnir/lspsaga.nvim',
        event = 'LspAttach',
        config = function()
            require('lspsaga').setup({
                lightbulb = {
                    virtual_text = false,
                },
                ui = {
                    code_action = "C"
                },
            })
            -- hover_doc
            vim.keymap.set('n', 'K', '<cmd>Lspsaga hover_doc ++quiet<CR>')

            -- lsp_finder
            vim.keymap.set('n', 'gh', '<cmd>Lspsaga lsp_finder<CR>')

            -- code_action
            vim.keymap.set('n', 'ga', '<cmd>Lspsaga code_action<CR>')

            -- goto_definition
            -- Due to issues with <c-i> and <c-o>, use vim.lsp.buf.definition
            -- vim.keymap.set('n', 'gd', '<cmd>Lspsaga goto_definition<CR>')
            vim.keymap.set('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>zz')

            -- peek_definition
            vim.keymap.set('n', 'gp', '<cmd>Lspsaga peek_definition<CR>')

            -- peek type definition
            -- vim.keymap.set('n', '', '<cmd>lua vim.lsp.buf.type_definition()<CR>')

            -- peek type declaration
            vim.keymap.set('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>')

            -- go to implementation
            vim.keymap.set('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>')

            -- open diagnostic
            vim.keymap.set('n', 'ge', '<cmd>lua vim.diagnostic.open_float()<CR>')

            -- call hierarchy (incoming, outgoing)
            vim.keymap.set("n", "<Leader>ci", "<cmd>Lspsaga incoming_calls<CR>")
            vim.keymap.set("n", "<Leader>co", "<cmd>Lspsaga outgoing_calls<CR>")

            -- rename (entire file)
            vim.keymap.set('n', 'gr', '<cmd>Lspsaga rename<CR>')

            -- navigate between diagnostics
            vim.keymap.set('n', '[g', '<cmd>Lspsaga diagnostic_jump_next<CR>')
            vim.keymap.set('n', ']g', '<cmd>Lspsaga diagnostic_jump_prev<CR>')

            -- show all diagnostics (buffer, workspace)
            vim.keymap.set('n', '<leader>d', '<cmd>Lspsaga show_buf_diagnostics<CR>')
            vim.keymap.set('n', '<leader>D', '<cmd>Lspsaga show_workspace_diagnostics<CR>')

            -- toggle outline
            vim.keymap.set('n', '<leader>0', '<cmd>Lspsaga outline<CR>')
        end,
        dependencies = { { 'nvim-tree/nvim-web-devicons' }, { 'nvim-treesitter/nvim-treesitter' } },
    },

    {
        'hrsh7th/nvim-cmp',
        event = 'InsertEnter, CmdlineEnter',
        dependencies = {
            'hrsh7th/cmp-nvim-lsp',
            'hrsh7th/cmp-path',
            'hrsh7th/cmp-buffer',
            'hrsh7th/cmp-cmdline',
            'hrsh7th/cmp-vsnip',
            'hrsh7th/cmp-nvim-lsp-signature-help',
            'hrsh7th/cmp-nvim-lsp-document-symbol',
            'onsails/lspkind.nvim',
            'hrsh7th/vim-vsnip',
        },
        config = function()
            local cmp = require('cmp')
            cmp.setup({
                window = {
                    completion = cmp.config.window.bordered({
                        border = 'single'
                    }),
                    documentation = cmp.config.window.bordered({
                        border = 'single'
                    }),
                },
                snippet = {
                    expand = function(args)
                        vim.fn["vsnip#anonymous"](args.body)
                    end,
                },
                sources = cmp.config.sources({
                    { name = "path" },
                    { name = "nvim_lsp" },
                    { name = "vsnip" },
                    { name = "nvim_lsp_signature_help" },
                }, {
                    { name = "buffer", keyword_length = 2 }
                }),
                mapping = cmp.mapping.preset.insert({
                    ["<C-p>"] = cmp.mapping.select_prev_item(),
                    ["<C-n>"] = cmp.mapping.select_next_item(),
                    ["<C-f>"] = cmp.mapping.confirm { select = true },
                    ["<TAB>"] = cmp.mapping.confirm { select = true },
                    ["<CR>"]  = cmp.mapping.confirm { select = false },
                }),
                experimental = {
                    ghost_text = true,
                },
                formatting = {
                    format = require('lspkind').cmp_format({
                        mode = 'symbol',
                        maxwidth = 50,
                        ellipsis_char = '...',
                    })
                }
            })

            -- cmp.setup.cmdline({ '/', '?' }, {
            --     mapping = cmp.mapping.preset.cmdline(),
            --     sources = cmp.config.sources({
            --         { name = 'nvim_lsp_document_symbol' }
            --     }, {
            --         { name = 'buffer' }
            --     })
            -- })

            cmp.setup.cmdline(":", {
                mapping = cmp.mapping.preset.cmdline(),
                sources = cmp.config.sources({
                    { name = "path" },
                }, {
                    { name = "cmdline", keyword_length = 2 },
                }),
                performance = {
                    max_view_entries = 30
                }
            })
        end
    },

    {
        'jose-elias-alvarez/null-ls.nvim',
        dependencies = { "nvim-lua/plenary.nvim" },
        config = function()
            local null_ls = require("null-ls")
            local sources = {
                -- Ruby
                -- null_ls.builtins.diagnostics.rubocop.with({
                --     prefer_local = "bin",
                -- }),
                -- null_ls.builtins.formatting.rubocop.with({
                --     prefer_local = "bin",
                -- }),

                -- Python
                null_ls.builtins.diagnostics.flake8,
                null_ls.builtins.formatting.isort,
                null_ls.builtins.formatting.yapf,

                -- Go
                null_ls.builtins.formatting.gofmt,

                -- Rust
                null_ls.builtins.formatting.rustfmt,

                -- yaml
                null_ls.builtins.diagnostics.yamllint,

                -- Eslint
                null_ls.builtins.diagnostics.eslint.with({
                    prefer_local = "node_modules/.bin",
                }),
                null_ls.builtins.formatting.prettier,

            }
            null_ls.setup({
                diagnostics_format = "#{m} (#{s}: #{c})",
                sources            = sources,
                debug              = false,
                defaults           = {
                }
            })
        end
    },

    {
        'is0n/jaq-nvim',
        event = 'VeryLazy',
        config = function()
            require('jaq-nvim').setup {
                cmds = {
                    internal = {
                        lua = 'luafile %',
                        vim = 'source %',
                    },
                    external = {
                        c          = 'gcc %; ./a.out; rm a.out',
                        cpp        = 'g++ %; ./a.out; rm a.out',
                        go         = 'go run %',
                        markdown   = 'glow %',
                        python     = 'python %',
                        ruby       = '[ -d .bundle ] && bundle exec ruby % || ruby %',
                        rust       = 'cargo run %',
                        sh         = 'sh %',
                        zig        = 'zig build run',
                        javascript = 'node %'
                    }
                },
                behavior = {
                    default = 'bang',
                    startinsert = false,
                    wincmd = false,
                    autosave = true,
                },
                ui = {
                    float = {
                        border = 'single'
                    },
                    quickfix = {
                        postion = 'bot',
                        size = 10,
                    }
                }
            }
            vim.keymap.set('n', '<leader>q', '<cmd>Jaq<CR>')
        end
    },

    {
        "kylechui/nvim-surround",
        event = "VeryLazy",
        config = function()
            require("nvim-surround").setup({})
        end
    },

    {
        "folke/which-key.nvim",
        config = function()
            require("plugin_configs/_whichkey")
        end
    },

    {
        "tpope/vim-endwise",
        event = "VeryLazy",
    },

    {
        "tpope/vim-sleuth"
    },

    {
        "mechatroner/rainbow_csv"
    },

    {
        "easymotion/vim-easymotion",
        config = function()
            vim.api.nvim_set_keymap("n", "<leader>s", "<Plug>(easymotion-overwin-w)", { noremap = true, silent = true })
        end
    },

    {
        'ojroques/nvim-osc52',
        config = function()
            if vim.fn.has('unix') == 1 and vim.fn.exists('$SSH_CLIENT') == 1 then
                local function copy()
                    if vim.v.event.operator == 'y' then
                        require('osc52').copy_register('0')
                    end
                end

                vim.api.nvim_create_autocmd('TextYankPost', { callback = copy })
            end
        end
    },

    {
        'slim-template/vim-slim'
    },

    -- {
    --     'glepnir/dashboard-nvim',
    --     event = 'VimEnter',
    --     config = function()
    --         require('dashboard').setup {
    --             theme = 'doom',
    --             config = {
    --                 center = {
    --                     {
    --                         icon = '',
    --                         icon_hl = 'group',
    --                         desc = 'description',
    --                         desc_hl = 'group',
    --                         key = 'shortcut key in dashboard buffer not keymap !!',
    --                         key_hl = 'group',
    --                         action = '',
    --                     },
    --                 },
    --                 footer = {},
    --             }
    --         }
    --     end,
    --     dependencies = { {'nvim-tree/nvim-web-devicons'}}
    -- }
})
