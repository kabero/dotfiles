local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
    vim.fn.system({
        "git",
        "clone",
        "--filter=blob:none",
        "--single-branch",
        "https://github.com/folke/lazy.nvim.git",
        lazypath,
    })
end
vim.opt.runtimepath:prepend(lazypath)

require('lazy').setup({
    {
        "LazyVim/LazyVim",
    },

    {
        "sainnhe/everforest",
        config = function()
            vim.cmd [[ let g:everforest_background = 'hard' ]]
            -- use the blue defined in everforest for highlighting constants
            vim.cmd [[ autocmd Colorscheme * highlight @constant guifg=#7fbbb3 ]]
        end
    },

    {
        "junegunn/seoul256.vim"
    },

    {
        "folke/tokyonight.nvim",
        lazy = false,
        priority = 1000,
    },

    {
        "nanotech/jellybeans.vim",
    },

    {
        "ellisonleao/gruvbox.nvim",
        priority = 1000,
        config = function()
            require("gruvbox").setup({
                undercurl = true,
                underline = false,
                bold = true,
                italic = {
                    strings = false,
                    comments = false,
                    operators = false,
                    folds = false,
                },
                inverse = true,
                contrast = "hard",
                palette_overrides = {},
                overrides = {},
                dim_inactive = false,
                transparent_mode = false,
            })
        end,
    },

    {
        "nvim-telescope/telescope.nvim",
        cmd = 'Telescope',
        dependencies = {
            "nvim-lua/plenary.nvim",
            {
                "nvim-telescope/telescope-live-grep-args.nvim",
                -- This will not install any breaking changes.
                -- For major updates, this must be adjusted manually.
                version = "^1.0.0",
            }
        },
        config = function()
            require("telescope").load_extension("live_grep_args")
            require('plugin_configs/_telescope')
        end
    },

    {
        "nvim-telescope/telescope-file-browser.nvim",
        dependencies = { "nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim" },
        config = function()
            vim.api.nvim_set_keymap(
                "n",
                "<leader>fn",
                ":Telescope file_browser theme=ivy path=%:p:h select_buffer=true hidden=true respect_gitignore=false<CR>",
                { noremap = true }
            )
        end
    },

    {
        "nvim-telescope/telescope-frecency.nvim",
        event = 'VeryLazy',
        config = function()
            require "telescope".load_extension("frecency")
        end,
        dependencies = { "kkharji/sqlite.lua" }
    },

    {
        'nvim-lualine/lualine.nvim',
        event = 'VeryLazy',
        dependencies = {
            'nvim-tree/nvim-web-devicons',
        },
        config = function()
            require('lualine').setup {
                require("plugin_configs/_lualine")
            }
        end
    },

    {
        'windwp/nvim-autopairs',
        event = 'InsertEnter',
        config = function()
            require('nvim-autopairs').setup({})
        end
    },

    { 'tpope/vim-commentary', lazy = false },

    {
        'nvim-treesitter/nvim-treesitter',
        event = { "BufReadPost", "BufNewFile" },
        dependencies = 'windwp/nvim-ts-autotag',
        config = function()
            require("plugin_configs/_nvim_treesitter")
        end
    },

    {
        'EmranMR/tree-sitter-blade',
        lazy = false,
        dependencies = 'nvim-treesitter/nvim-treesitter',
        config = function()
            local parser_config = require "nvim-treesitter.parsers".get_parser_configs()
            parser_config.blade = {
                install_info = {
                    url = "https://github.com/EmranMR/tree-sitter-blade",
                    files = { "src/parser.c" },
                    branch = "main",
                },
                filetype = "blade"
            }
            vim.cmd [[
                augroup BladeFiltypeRelated
                    au BufNewFile,BufRead *.blade.php set ft=blade
                augroup END
            ]]
        end
        -- :TSInstall blade
        -- :TSEditQuery highlights blade
        -- :TSEditQuery injections blade
    },

    {
        "nvim-treesitter/nvim-treesitter-textobjects",
        dependencies = "nvim-treesitter/nvim-treesitter",
        config = function()
            require 'nvim-treesitter.configs'.setup {
                textobjects = {
                    select = {
                        enable = true,
                        lookahead = false,
                        keymaps = {
                            ["af"] = "@function.outer",
                            ["if"] = "@function.inner",
                            ["ac"] = "@class.outer",
                            ["ic"] = { query = "@class.inner", desc = "Select inner part of a class region" },
                            ["as"] = { query = "@scope", query_group = "locals", desc = "Select language scope" },
                        },
                        include_surrounding_whitespace = false,
                    },
                },
            }
        end
    },

    {
        'j-hui/fidget.nvim',
        event = 'LspAttach',
        tag = 'legacy',
        config = function()
            require('fidget').setup({})
        end
    },

    {
        'lewis6991/gitsigns.nvim',
        event = { "BufReadPost", "BufNewFile" },
        config = function()
            require('gitsigns').setup {
                on_attach = function(bufnr)
                    local function map(mode, lhs, rhs, opts)
                        opts = vim.tbl_extend('force', { noremap = true, silent = true }, opts or {})
                        vim.api.nvim_buf_set_keymap(bufnr, mode, lhs, rhs, opts)
                    end

                    -- Navigation
                    map('n', ']c', "&diff ? ']c' : '<cmd>Gitsigns next_hunk<CR>'", { expr = true })
                    map('n', '[c', "&diff ? '[c' : '<cmd>Gitsigns prev_hunk<CR>'", { expr = true })

                    -- Actions
                    map('n', '<leader>aj', '<cmd>Gitsigns preview_hunk<CR>')
                    map('n', '<leader>ak', '<cmd>lua require"gitsigns".blame_line{full=true}<CR>')
                    map('n', '<leader>al', '<cmd>lua require"gitsigns".diffthis(nill, {vertical=true})<CR>')
                    -- TODO: modify the behavior
                    map('n', '<leader>1', '<cmd>Gitsigns toggle_current_line_blame<CR>')
                    map('n', '<leader>2', '<cmd>Gitsigns toggle_deleted<CR>')
                end
            }
        end
    },

    {
        'neovim/nvim-lspconfig',
        event = 'InsertEnter',
    },

    {
        'mfussenegger/nvim-dap',
        event = "VeryLazy"
    },

    {
        'williamboman/mason.nvim',
        event = "VeryLazy",
        build = ":MasonUpdate",
        config = function()
            local mason = require('mason')
            mason.setup({
                ui = {
                    icons = {
                        package_installed = "✓",
                        package_pending = "→",
                        package_uninstalled = "✗"
                    }
                }
            })
        end
    },

    {
        'williamboman/mason-lspconfig.nvim',
        lazy = false,
        config = function()
            local mason_lspconfig = require('mason-lspconfig')
            local nvim_lsp = require('lspconfig')
            require('mason-lspconfig').setup {
                ensure_installed = {}
            }

            mason_lspconfig.setup_handlers({ function(server)
                local opts = {}
                opts.on_attach = function(client, bufnr)
                    -- Disable formatting for specific LSP clients (like intelephense)
                    if client.name == "intelephense" then
                        client.server_capabilities.documentFormattingProvider = false
                        client.server_capabilities.documentRangeFormattingProvider = false
                    end

                    -- keymap for formatting
                    local bufopts = { noremap = true, silent = true, buffer = bufnr }
                    vim.keymap.set('n', 'gl', function() vim.lsp.buf.format { async = true } end, bufopts)
                end
                nvim_lsp[server].setup(opts)
            end })

            vim.diagnostic.config {
                virtual_text = {
                    format = function(diagnostic)
                        return string.format("%s (%s: %s)", diagnostic.message, diagnostic.source, diagnostic.code)
                    end,
                },
                signs = true,
                underline = true,
            }

            vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
                vim.lsp.diagnostic.on_publish_diagnostics, {
                    update_in_insert = false,
                    -- virtual_text = {
                    --     format = function(diagnostic)
                    --         return string.format("%s (%s: %s)", diagnostic.message, diagnostic.source, diagnostic.code)
                    --     end,
                    -- },
                }
            )

            function ToggleDisplayDiagnostics()
                if ShowingDiagnostics == nil then
                    ShowingDiagnostics = true
                end

                if ShowingDiagnostics then
                    vim.diagnostic.disable()
                    print("Diagnostics disabled")
                else
                    vim.diagnostic.enable()
                    print("Diagnostics enabled")
                end
                ShowingDiagnostics = not ShowingDiagnostics
            end

            vim.keymap.set('n', '<leader>9', '<cmd>lua ToggleDisplayDiagnostics()<CR>', { noremap = true, silent = true })
        end
    },

    {
        "nvim-tree/nvim-web-devicons"
    },

    {
        'glepnir/lspsaga.nvim',
        event = 'LspAttach',
        config = function()
            require('lspsaga').setup({
                lightbulb = {
                    virtual_text = false,
                },
                ui = {
                    code_action = "C"
                },
                symbol_in_winbar = {
                    enable = false,
                    hide_keyword = true,
                    show_file = false,
                    separator = " > ",
                },
                finder = {
                    max_height = 0.6,
                    default = 'tyd+ref+imp+def',
                    keys = {
                        toggle_or_open = '<CR>',
                        vsplit = 'v',
                        split = 's',
                        tabnew = 't',
                        tab = 'T',
                        quit = 'q',
                        close = '<Esc>',
                    },
                    methods = {
                        tyd = 'textDocument/typeDefinition',
                    },
                    layout = 'normal'
                }
            })
            vim.keymap.set('n', '<leader>,', "<Cmd>Lspsaga finder<CR>", { desc = 'Telescope: live grep args', })

            -- hover_doc
            vim.keymap.set('n', 'K', '<cmd>Lspsaga hover_doc ++quiet<CR>')

            -- lsp_finder
            vim.keymap.set('n', 'gh', '<cmd>Lspsaga lsp_finder<CR>')

            -- code_action
            vim.keymap.set('n', 'ga', '<cmd>Lspsaga code_action<CR>')

            -- goto_definition
            -- Due to issues with <c-i> and <c-o>, use vim.lsp.buf.definition
            -- vim.keymap.set('n', 'gd', '<cmd>Lspsaga goto_definition<CR>')
            vim.keymap.set('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>zz')

            -- peek_definition
            vim.keymap.set('n', 'gp', '<cmd>Lspsaga peek_definition<CR>')

            -- peek type definition
            -- vim.keymap.set('n', '', '<cmd>lua vim.lsp.buf.type_definition()<CR>')

            -- peek type declaration
            vim.keymap.set('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>')

            -- go to implementation
            vim.keymap.set('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>')

            -- open diagnostic
            vim.keymap.set('n', 'ge', '<cmd>lua vim.diagnostic.open_float()<CR>')

            -- call hierarchy (incoming, outgoing)
            vim.keymap.set("n", "<Leader>ci", "<cmd>Lspsaga incoming_calls<CR>")
            vim.keymap.set("n", "<Leader>co", "<cmd>Lspsaga outgoing_calls<CR>")

            -- rename (entire file)
            vim.keymap.set('n', 'gr', '<cmd>Lspsaga rename<CR>')

            -- navigate between diagnostics
            vim.keymap.set('n', ']g', '<cmd>Lspsaga diagnostic_jump_next<CR>')
            vim.keymap.set('n', '[g', '<cmd>Lspsaga diagnostic_jump_prev<CR>')

            -- show all diagnostics (buffer, workspace)
            vim.keymap.set('n', '<leader>d', '<cmd>Lspsaga show_buf_diagnostics<CR>')
            vim.keymap.set('n', '<leader>D', '<cmd>Lspsaga show_workspace_diagnostics<CR>')

            -- toggle outline
            vim.keymap.set('n', '<leader>0', '<cmd>Lspsaga outline<CR>')
        end,
        dependencies = { { 'nvim-tree/nvim-web-devicons' }, { 'nvim-treesitter/nvim-treesitter' } },
    },

    {
        'hrsh7th/nvim-cmp',
        event = { 'InsertEnter', 'CmdlineEnter' },
        dependencies = {
            'hrsh7th/cmp-nvim-lsp',
            'hrsh7th/cmp-path',
            'hrsh7th/cmp-buffer',
            'hrsh7th/cmp-cmdline',
            'hrsh7th/cmp-vsnip',
            'hrsh7th/cmp-nvim-lsp-signature-help',
            'hrsh7th/cmp-nvim-lsp-document-symbol',
            'onsails/lspkind.nvim',
            'hrsh7th/vim-vsnip',
        },
        config = function()
            local cmp = require('cmp')
            cmp.setup({
                window = {
                    completion = cmp.config.window.bordered({
                        border = 'single'
                    }),
                    documentation = cmp.config.window.bordered({
                        border = 'single'
                    }),
                },
                snippet = {
                    expand = function(args)
                        vim.fn["vsnip#anonymous"](args.body)
                    end,
                },
                sources = cmp.config.sources({
                    { name = "path" },
                    { name = "nvim_lsp" },
                    { name = "vsnip" },
                    { name = "nvim_lsp_signature_help" },
                }, {
                    { name = "buffer", keyword_length = 2 }
                }),
                mapping = cmp.mapping.preset.insert({
                    ["<C-p>"] = cmp.mapping.select_prev_item(),
                    ["<C-n>"] = cmp.mapping.select_next_item(),
                    ["<C-f>"] = cmp.mapping.confirm { select = true },
                    ["<TAB>"] = cmp.mapping.confirm { select = true },
                    ["<CR>"]  = cmp.mapping.confirm { select = false },
                }),
                experimental = {
                    ghost_text = true,
                },
                formatting = {
                    format = require('lspkind').cmp_format({
                        mode = 'symbol',
                        maxwidth = 50,
                        ellipsis_char = '...',
                    })
                }
            })

            cmp.setup.cmdline({ '/', '?' }, {
                mapping = cmp.mapping.preset.cmdline(),
                sources = cmp.config.sources({
                    { name = 'nvim_lsp_document_symbol' }
                }, {
                    { name = 'buffer' }
                })
            })

            cmp.setup.cmdline(":", {
                mapping = cmp.mapping.preset.cmdline(),
                sources = cmp.config.sources({
                    { name = "path" },
                }, {
                    { name = "cmdline", keyword_length = 2 },
                }),
                performance = {
                    max_view_entries = 30
                }
            })
        end
    },

    {
        'nvimtools/none-ls.nvim',
        dependencies = { "nvim-lua/plenary.nvim" },
        config = function()
            local null_ls = require("null-ls")
            local sources = {
                -- Ruby
                -- null_ls.builtins.diagnostics.rubocop.with({
                --     prefer_local = "bin",
                -- }),
                -- null_ls.builtins.formatting.rubocop.with({
                --     prefer_local = "bin",
                -- }),

                -- Python
                -- null_ls.builtins.diagnostics.flake8.with({
                --     -- prefer_local = ".direnv/python-*/bin"
                --     prefer_local = ".venv/bin"
                -- }),
                -- null_ls.builtins.formatting.isort.with({
                --     -- prefer_local = ".direnv/python-*/bin"
                --     prefer_local = ".venv/bin"
                -- }),
                -- null_ls.builtins.formatting.black.with({
                --     -- prefer_local = ".direnv/python-*/bin"
                --     prefer_local = ".venv/bin"
                -- }),

                -- PHP
                -- null_ls.builtins.formatting.pint.with({
                --     prefer_local = "vendor/bin"
                -- }),

                -- Go
                -- null_ls.builtins.formatting.gofmt,

                -- Rust
                -- null_ls.builtins.formatting.rustfmt,

                -- PHP
                null_ls.builtins.formatting.pint,

                -- yaml
                -- null_ls.builtins.diagnostics.yamllint,

                -- Eslint
                -- null_ls.builtins.diagnostics.eslint.with({
                --     prefer_local = "node_modules/.bin",
                -- }),
                null_ls.builtins.formatting.prettier,

            }
            null_ls.setup({
                diagnostics_format = "#{m} (#{s}: #{c})",
                sources            = sources,
                debug              = false,
                defaults           = {},
                -- Prioritize null-ls formatters over LSP formatters
                on_attach          = function(client)
                    client.server_capabilities.documentFormattingProvider = true
                    client.server_capabilities.documentRangeFormattingProvider = true
                end
            })
        end
    },

    {
        'is0n/jaq-nvim',
        event = 'VeryLazy',
        config = function()
            require('jaq-nvim').setup {
                cmds = {
                    internal = {
                        lua = 'luafile %',
                        vim = 'source %',
                        markdown = 'PreviewMarkdown'
                    },
                    external = {
                        c          = 'gcc %; ./a.out; rm a.out',
                        cpp        = 'g++ %; ./a.out; rm a.out',
                        go         = 'go run %',
                        python     = 'python %',
                        ruby       = '[ -d .bundle ] && bundle exec ruby % || ruby %',
                        rust       = 'rustc % -o tmp.out; ./tmp.out; rm tmp.out',
                        sh         = 'sh %',
                        zig        = 'zig build run',
                        javascript = 'node %',
                        typescript = './node_modules/.bin/ts-node %'
                    }
                },
                behavior = {
                    default = 'bang',
                    startinsert = false,
                    wincmd = false,
                    autosave = true,
                },
                ui = {
                    float = {
                        border = 'single'
                    },
                    quickfix = {
                        postion = 'bot',
                        size = 10,
                    }
                }
            }
            vim.keymap.set('n', '<leader>q', '<cmd>Jaq<CR>')
        end
    },

    {
        "kylechui/nvim-surround",
        event = "VeryLazy",
        config = function()
            require("nvim-surround").setup({})
        end
    },

    {
        "folke/which-key.nvim",
        lazy = true,
        cmd = {
            "WhichKey"
        },
        keys = {
            { '<leader>w', mode = 'n' }
        },
        config = function()
            vim.api.nvim_set_keymap("n", "<leader>w", ":WhichKey<CR>", { noremap = true, silent = true })
            require("plugin_configs/_whichkey")
        end
    },

    {
        "tpope/vim-endwise",
        event = "VeryLazy",
    },

    {
        "tpope/vim-sleuth"
    },

    {
        "mechatroner/rainbow_csv",
        ft = "csv",
        config = function()
            vim.g.disable_rainbow_hover = 1
            vim.g.rcsv_colorpairs = {
                { 'darkcyan',    'darkcyan' },
                { 'green',       'green' },
                { 'red',         'red' },
                { 'NONE',        'NONE' },
                { 'darkred',     'darkred' },
                { 'magenta',     'magenta' },
                { 'darkblue',    'darkblue' },
                { 'darkgreen',   'darkgreen' },
                { 'darkmagenta', 'darkmagenta' },
            }
        end
    },

    {
        "phaazon/hop.nvim",
        event = 'VeryLazy',
        config = function()
            local hop = require('hop')
            hop.setup({
                create_hl_autocmd = false,
            })
            vim.keymap.set('n', '<leader>s', function()
                hop.hint_words({ current_line_only = false, create_hl_autocmd = false })
            end, { remap = true })
            vim.api.nvim_set_keymap("n", "<leader>s", ":HopWordMW<CR>", { noremap = true, silent = true })

            -- highlights
            vim.api.nvim_set_hl(0, 'HopNextKey', { fg = '#4cc9f0', bold = true, cterm = { bold = true, italic = true } })
            vim.api.nvim_set_hl(0, 'HopNextKey1', { fg = '#9d4edd', bold = true, cterm = { bold = true } })
            vim.api.nvim_set_hl(0, 'HopNextKey2', { fg = '#9d4edd', bold = true, cterm = { bold = true } })
            vim.api.nvim_set_hl(0, 'HopUnmatched', { fg = '#444444', cterm = { italic = true } })
        end
    },

    {
        'ojroques/nvim-osc52',
        event = 'VeryLazy',
        config = function()
            if vim.fn.has('unix') == 1 and vim.fn.exists('$SSH_CLIENT') == 1 then
                local function copy()
                    if vim.v.event.operator == 'y' then
                        require('osc52').copy_register('0')
                    end
                end

                vim.api.nvim_create_autocmd('TextYankPost', { callback = copy })
            end
        end
    },

    {
        'nathanaelkane/vim-indent-guides',
        config = function()
            vim.keymap.set("n", "<Leader>8", "<cmd>IndentGuidesToggle<CR>")
            vim.g.indent_guides_auto_colors = 0
        end
    },

    { 'vim-denops/denops.vim' },

    {
        'kat0h/bufpreview.vim',
        requires = { 'vim-denops/denops.vim' },
    },

    {
        'akinsho/git-conflict.nvim',
        ft = { 'gitcommit', 'gitrebase', 'gitconfig' },
        version = "*",
        config = function()
            require('git-conflict').setup({
                default_mappings = false,
                default_commands = false,
                highlights = {
                    incoming = 'DiffChange',
                    current = 'DiffAdd',
                }
            })
        end
    },

    {
        "tyru/open-browser.vim",
        event = 'VeryLazy',
        config = function()
            vim.keymap.set('n', 'go', '<Plug>(openbrowser-smart-search)', { noremap = false, silent = true })
            vim.keymap.set('v', 'go', '<Plug>(openbrowser-smart-search)', { noremap = false, silent = true })
        end
    },

    {
        "akinsho/toggleterm.nvim",
        version = "*",
        event = 'VeryLazy',
        config = function()
            require("toggleterm").setup {
                size = 30,
                open_mapping = [[<c-j>]]
            }
        end
    },

    {
        "rhysd/committia.vim"
    },

    {
        "norcalli/nvim-colorizer.lua"
    },

    {
        "folke/todo-comments.nvim",
        dependencies = { "nvim-lua/plenary.nvim" },
    },

    {
        "hiphish/rainbow-delimiters.nvim",
        config = function()
            local rainbow_delimiters = require 'rainbow-delimiters'
            vim.g.rainbow_delimiters = {
                strategy = {
                    [''] = rainbow_delimiters.strategy['global'],
                    vim = rainbow_delimiters.strategy['local'],
                },
                query = {
                    [''] = 'rainbow-delimiters',
                    lua = 'rainbow-blocks',
                },
                highlight = {
                    'RainbowDelimiterYellow',
                    'RainbowDelimiterBlue',
                    'RainbowDelimiterOrange',
                    'RainbowDelimiterGreen',
                    'RainbowDelimiterViolet',
                    'RainbowDelimiterCyan',
                    'RainbowDelimiterRed',
                },
            }

            vim.keymap.set('n', '<leader>7', '<cmd>lua require"rainbow-delimiters".toggle(0)<CR>',
                { noremap = true, silent = true })
        end
    },

    {
        "tpope/vim-fugitive",
        event = 'VeryLazy',
        vim.api.nvim_set_keymap("n", "<leader>gc", ":0Gclog<CR>", { noremap = true, silent = true })
    },

    {
        "github/copilot.vim",
        lazy = false,
        config = function()
            vim.keymap.set("i", "<C-l>", 'copilot#Accept()', { silent = true, expr = true, replace_keycodes = false })
            vim.g.copilot_no_tab_map = true
            vim.keymap.set('i', '<C-c>', function()
                vim.fn['copilot#Dismiss']()
                vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes('<C-c>', true, true, true), 'n', true)
            end, { noremap = true, silent = true })
            vim.g.copilot_filetypes = {
                ["*"] = true,
                ["help"] = false,
                ["gitcommit"] = false,
                ["gitrebase"] = false,
                ["hgcommit"] = false,
                ["svn"] = false,
                ["cvs"] = false,
                [".*"] = false,
            }
            vim.g.copilot_enabled = true
            vim.g.copilot_show_ghost_text = true
        end
    },

    {
        'sindrets/diffview.nvim',
        event = 'VeryLazy',
    },

    {
        "fdschmidt93/telescope-egrepify.nvim",
        dependencies = { "nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim" },
        config = function()
            require('telescope').load_extension('egrepify')
        end
    },

    {
        'RRethy/vim-illuminate',
        config = function()
            require('illuminate').configure({
                filetypes_denylist = {
                    'dirbuf',
                    'dirvish',
                    'fugitive',
                    'markdown',
                    'sagafinder',
                },
                under_cursor = false,
            })
        end
    },

    {
        'b0o/incline.nvim',
        dependencies = {
            'nvim-tree/nvim-web-devicons',
        },
        config = function()
            local devicons = require 'nvim-web-devicons'
            require('incline').setup {
                render = function(props)
                    local filename = vim.fn.fnamemodify(vim.api.nvim_buf_get_name(props.buf), ':.')
                    if filename == '' then
                        filename = '[No Name]'
                    end
                    local ft_icon, ft_color = devicons.get_icon_color(filename)

                    local function get_git_diff()
                        local icons = { removed = '-', changed = '~', added = '+' }
                        local signs = vim.b[props.buf].gitsigns_status_dict
                        local labels = {}
                        if signs == nil then
                            return labels
                        end
                        for name, icon in pairs(icons) do
                            if tonumber(signs[name]) and signs[name] > 0 then
                                table.insert(labels, { icon .. signs[name] .. ' ', group = 'Diff' .. name })
                            end
                        end
                        if #labels > 0 then
                            table.insert(labels, { '┊ ' })
                        end
                        return labels
                    end

                    local function get_diagnostic_label()
                        local icons = { error = '', warn = '', info = '', hint = '' }
                        local label = {}

                        for severity, icon in pairs(icons) do
                            local n = #vim.diagnostic.get(props.buf,
                                { severity = vim.diagnostic.severity[string.upper(severity)] })
                            if n > 0 then
                                table.insert(label, { icon .. n .. ' ', group = 'DiagnosticSign' .. severity })
                            end
                        end
                        if #label > 0 then
                            table.insert(label, { '┊ ' })
                        end
                        return label
                    end

                    return {
                        { get_diagnostic_label() },
                        { get_git_diff() },
                        { (ft_icon or '') .. ' ', guifg = ft_color,                                            guibg = 'none' },
                        { filename .. ' ',        gui = vim.bo[props.buf].modified and 'bold,italic' or 'bold' },
                    }
                end,
            }
        end,
        event = 'VeryLazy',
    },

    {
        'JoosepAlviste/nvim-ts-context-commentstring',
    },

    {
        "ray-x/lsp_signature.nvim",
        event = "InsertEnter",
        opts = {
        },
    },

    {
        "aznhe21/actions-preview.nvim",
        lazy = true,
        event = { 'LspAttach' },
        dependencies = {
            'kosayoda/nvim-lightbulb',
            "neovim/nvim-lspconfig",
        },
        init = function()
            vim.api.nvim_create_autocmd("LspAttach", {
                desc = "Setup code action preview",
                callback = function(args)
                    local bufnr = args.buf

                    vim.keymap.set("n", "<leader><space>", function()
                        require("actions-preview").code_actions()
                    end, { buffer = bufnr, desc = "LSP: Code action" })
                end,
            })
        end,
        config = function()
            require("actions-preview").setup {}
        end,
    },

    {
        'cordx56/rustowl',
        version = '*',
        build = 'cargo install --path . --locked',
        lazy = false, -- This plugin is already lazy
        opts = {
            client = {
                on_attach = function(_, buffer)
                    vim.keymap.set('n', '<leader>o', function()
                        require('rustowl').toggle(buffer)
                    end, { buffer = buffer, desc = 'Toggle RustOwl' })
                end
            },
        },
    }
})
