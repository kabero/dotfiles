local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
    vim.fn.system({
        "git",
        "clone",
        "--filter=blob:none",
        "--single-branch",
        "https://github.com/folke/lazy.nvim.git",
        lazypath,
    })
end
vim.opt.runtimepath:prepend(lazypath)

require('lazy').setup({
    {
        "LazyVim/LazyVim",
    },

    { "Mofiqul/dracula.nvim" },

    {
        "nvim-telescope/telescope.nvim",
        cmd = 'Telescope',
        dependencies = {
            "nvim-lua/plenary.nvim",
            {
                "nvim-telescope/telescope-live-grep-args.nvim",
                -- This will not install any breaking changes.
                -- For major updates, this must be adjusted manually.
                version = "^1.0.0",
            }
        },
        config = function()
            require("telescope").load_extension("live_grep_args")
            require('plugin_configs/_telescope')
        end
    },

    {
        "nvim-telescope/telescope-file-browser.nvim",
        lazy = false,
        dependencies = { "nvim-telescope/telescope.nvim", "nvim-lua/plenary.nvim" },
        config = function()
            vim.api.nvim_set_keymap(
                "n",
                "<leader>fn",
                ":Telescope file_browser theme=ivy path=%:p:h select_buffer=true hidden=true respect_gitignore=false<CR>",
                { noremap = true }
            )
        end
    },

    {
        "nvim-telescope/telescope-frecency.nvim",
        lazy = true,
        config = function()
            require "telescope".load_extension("frecency")
        end,
        dependencies = { "kkharji/sqlite.lua" }
    },

    {
        'windwp/nvim-autopairs',
        event = 'InsertEnter',
        config = function()
            require('nvim-autopairs').setup({})
        end
    },

    { 
        'tpope/vim-commentary',
        lazy = false 
    },

    {
        'nvim-treesitter/nvim-treesitter',
        lazy = false,
        dependencies = 'windwp/nvim-ts-autotag',
        config = function()
            require("plugin_configs/_nvim_treesitter")
        end
    },

    {
        "nvim-treesitter/nvim-treesitter-textobjects",
        dependencies = "nvim-treesitter/nvim-treesitter",
        config = function()
            require 'nvim-treesitter.configs'.setup {
                textobjects = {
                    select = {
                        enable = true,
                        lookahead = false,
                        keymaps = {
                            ["af"] = "@function.outer",
                            ["if"] = "@function.inner",
                            ["ac"] = "@class.outer",
                            ["ic"] = { query = "@class.inner", desc = "Select inner part of a class region" },
                            ["as"] = { query = "@scope", query_group = "locals", desc = "Select language scope" },
                        },
                        include_surrounding_whitespace = false,
                    },
                },
            }
        end
    },

    {
        'lewis6991/gitsigns.nvim',
        lazy = false,
        config = function()
            require('gitsigns').setup {
                on_attach = function(bufnr)
                    local function map(mode, lhs, rhs, opts)
                        opts = vim.tbl_extend('force', { noremap = true, silent = true }, opts or {})
                        vim.api.nvim_buf_set_keymap(bufnr, mode, lhs, rhs, opts)
                    end

                    -- Navigation
                    map('n', ']c', "&diff ? ']c' : '<cmd>Gitsigns next_hunk<CR>'", { expr = true })
                    map('n', '[c', "&diff ? '[c' : '<cmd>Gitsigns prev_hunk<CR>'", { expr = true })

                    -- Actions
                    map('n', '<leader>aj', '<cmd>Gitsigns preview_hunk<CR>')
                    map('n', '<leader>ak', '<cmd>lua require"gitsigns".blame_line{full=true}<CR>')
                    map('n', '<leader>al', '<cmd>Gitsigns diffthis<CR>')
                    -- TODO: modify the behavior
                    map('n', '<leader>1', '<cmd>Gitsigns toggle_current_line_blame<CR>')
                    map('n', '<leader>2', '<cmd>Gitsigns toggle_deleted<CR>')
                end
            }
        end
    },

    {
        'neovim/nvim-lspconfig',
        event = 'InsertEnter',
    },

    {
        'williamboman/mason.nvim',
        lazy = false,
        build = ":MasonUpdate",
        config = function()
            local mason = require('mason')
            mason.setup({
                ui = {
                    icons = {
                        package_installed = "✓",
                        package_pending = "→",
                        package_uninstalled = "✗"
                    }
                }
            })
        end
    },

    {
        'williamboman/mason-lspconfig.nvim',
        lazy = false,
        config = function()
            local mason_lspconfig = require('mason-lspconfig')
            local nvim_lsp = require('lspconfig')
            require('mason-lspconfig').setup {
                ensure_installed = {}
            }

            mason_lspconfig.setup_handlers({ function(server)
                local opts = {}
                opts.on_attach = function(_, bufnr)
                    -- keymap for formatting
                    local bufopts = { noremap = true, silent = true, buffer = bufnr }
                    vim.keymap.set('n', 'gl', function() vim.lsp.buf.format { async = true } end, bufopts)
                end
                nvim_lsp[server].setup(opts)
            end })

            vim.diagnostic.config {
                virtual_text = {
                    format = function(diagnostic)
                        return string.format("%s (%s: %s)", diagnostic.message, diagnostic.source, diagnostic.code)
                    end,
                },
                signs = true,
                underline = true,
            }

            vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
                vim.lsp.diagnostic.on_publish_diagnostics, {
                    update_in_insert = false,
                    -- virtual_text = {
                    --     format = function(diagnostic)
                    --         return string.format("%s (%s: %s)", diagnostic.message, diagnostic.source, diagnostic.code)
                    --     end,
                    -- },
                }
            )

            function ToggleDisplayDiagnostics()
                if ShowingDiagnostics == nil then
                    ShowingDiagnostics = true
                end

                if ShowingDiagnostics then
                    vim.diagnostic.disable()
                    print("Diagnostics disabled")
                else
                    vim.diagnostic.enable()
                    print("Diagnostics enabled")
                end
                ShowingDiagnostics = not ShowingDiagnostics
            end

            vim.keymap.set('n', '<leader>9', '<cmd>lua ToggleDisplayDiagnostics()<CR>', { noremap = true, silent = true })
        end
    },

    {
        "nvim-tree/nvim-web-devicons"
    },

    {
        'hrsh7th/nvim-cmp',
        event = { 'InsertEnter', 'CmdlineEnter' },
        dependencies = {
            'hrsh7th/cmp-nvim-lsp',
            'hrsh7th/cmp-path',
            'hrsh7th/cmp-buffer',
            'hrsh7th/cmp-cmdline',
            'hrsh7th/cmp-vsnip',
            'hrsh7th/cmp-nvim-lsp-signature-help',
            'hrsh7th/cmp-nvim-lsp-document-symbol',
            'onsails/lspkind.nvim',
            'hrsh7th/vim-vsnip',
        },
        config = function()
            local cmp = require('cmp')
            cmp.setup({
                window = {
                    completion = cmp.config.window.bordered({
                        border = 'single'
                    }),
                    documentation = cmp.config.window.bordered({
                        border = 'single'
                    }),
                },
                snippet = {
                    expand = function(args)
                        vim.fn["vsnip#anonymous"](args.body)
                    end,
                },
                sources = cmp.config.sources({
                    { name = "path" },
                    { name = "nvim_lsp" },
                    { name = "vsnip" },
                    { name = "nvim_lsp_signature_help" },
                }, {
                    { name = "buffer", keyword_length = 2 }
                }),
                mapping = cmp.mapping.preset.insert({
                    ["<C-p>"] = cmp.mapping.select_prev_item(),
                    ["<C-n>"] = cmp.mapping.select_next_item(),
                    ["<C-f>"] = cmp.mapping.confirm { select = true },
                    ["<TAB>"] = cmp.mapping.confirm { select = true },
                    ["<CR>"]  = cmp.mapping.confirm { select = false },
                }),
                experimental = {
                    ghost_text = true,
                },
                formatting = {
                    format = require('lspkind').cmp_format({
                        mode = 'symbol',
                        maxwidth = 50,
                        ellipsis_char = '...',
                    })
                }
            })
        end
    },

    {
        "kylechui/nvim-surround",
        event = "VeryLazy",
        config = function()
            require("nvim-surround").setup({})
        end
    },

    {
        "tpope/vim-endwise",
        event = "VeryLazy",
    },

    {
        "tpope/vim-sleuth"
    },

    {
        "tyru/open-browser.vim",
        config = function()
            vim.keymap.set('n', 'go', '<Plug>(openbrowser-smart-search)', { noremap = false, silent = true })
            vim.keymap.set('v', 'go', '<Plug>(openbrowser-smart-search)', { noremap = false, silent = true })
        end
    },

    {
        "akinsho/toggleterm.nvim",
        version = "*",
        config = function()
            require("toggleterm").setup {
                size = 23,
                open_mapping = [[<c-j>]]
            }
        end
    },
})
